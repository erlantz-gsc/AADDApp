<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>