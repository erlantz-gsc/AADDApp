<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>